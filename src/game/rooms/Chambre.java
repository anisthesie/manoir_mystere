package game.rooms;

import game.Game;
import game.Player;
import input.Parser;

/**
 * Classe repr√©sentant la chambre du manoir.
 */
public class Chambre extends Room {

    /**
     * Indique si le bruit √©trange a d√©j√† √©t√© annonc√©.
     * Pour √©viter de spammer le joueur avec des messages.
     */
    private boolean announcedNoise;
    /**
     * Indique si l'araign√©e est toujours dans la pi√®ce.
     */
    private boolean spider;
    /**
     * Indique si la cl√© est toujours dans la pi√®ce.
     */
    private boolean key;

    public Chambre() {
        super("Chambre", "une chambre confortable mais inqui√©tante."
                , "Il y'a un lit √† votre droite, et une commode √† votre gauche.");
        this.announcedNoise = false;
        this.key = true;
        this.spider = true;
    }

    @Override
    public void roomLoop(Game game) {

        Player player = game.getPlayer();
        super.setVisited(true);

        while (player.getCurrentRoom().equals(this)) {

            // Si la chambre est verrouill√©e, on ne permet pas au joueur d'y acc√©der.
            if (this.isLocked(game)) {
                super.setVisited(false);
                System.out.println("\nVous ne pouvez pas acc√©der √† cette pi√®ce pour le moment.\n");
                game.enterRoom(game.getHall());
                game.waitForKey();
                return;
            }

            printRoom();
            game.printInterface();
            System.out.println("\nD√©placez-vous vers les √©lements de la pi√®ce pour les inspecter.");
            System.out.println("(Gauche, Droite, Haut, Bas, Pomme)\n");

            switch (game.waitForInput()) {
                case GAUCHE: // Commode avec une cl√©
                    System.out.println("Vous ouvrez le tiroir de la commode.");
                    if (key) {
                        key = false;
                        System.out.println("Vous avez trouv√© une cl√©!\n");
                        player.addKey();
                        if (player.getKeys() >= game.getRequiredKeys()) {
                            System.out.println("Vous avez trouv√© toutes les cl√©s n√©cessaires pour ouvrir la porte du manoir!");
                            System.out.println("Revenez vers le Hall pour vous √©chapper!\n");
                        }
                    } else {
                        System.out.println("Le tiroir est vide.\n");
                    }
                    break;
                case DROITE: // Lit avec une araign√©e
                    System.out.println("Vous inspectez le lit.");
                    if (spider) {
                        spider = false;
                        player.incrementFear();
                        System.out.println("Boo! Une araign√©e se cachait sous le lit!");
                        System.out.println("Vous avez maintenant " + player.getFearLevel() + "/" + game.getMaxFear() + " points de peur.\n");
                        if (player.getFearLevel() >= game.getMaxFear()) // On arr√™te tout. Le joueur a perdu.
                            return;
                    } else {
                        System.out.println("Il n'y a rien sur le lit.\n");
                    }
                    break;
                case BAS:
                    game.enterRoom(game.getHall());
                    return;
                case POMME:
                    game.eatApple();
                    break;
                default:
                    System.out.println("Il n'y rien d'int√©ressant dans cette direction.\n");
                    break;
            }
            game.waitForKey();

        }

    }

    @Override
    public void printRoom() {

        Parser.clearScreen();

        System.out.println("Vous √™tes dans la chambre :\n");

        System.out.println("           +------------+");
        System.out.println("           |            |");
        System.out.println("           +------------+");
        System.out.println("+----------+------------+------------+");
        System.out.println("| Commode  |     üèÉ     |     Lit    |");
        System.out.println("+----------+------------+------------+");
        System.out.println("           +------------+");
        System.out.println("           |   Revenir  |");
        System.out.println("           +------------+\n");

    }

    @Override
    public boolean isLocked(Game game) {
        return !(game.getBibliotheque().beenVisited() &&
                game.getCuisine().beenVisited() &&
                game.getSousSol().beenVisited());
    }

    /**
     * Indique si le bruit √©trange a d√©j√† √©t√© annonc√©, pour ne pas spammer le joueur.
     *
     * @return true si le bruit a d√©j√† √©t√© annonc√©, false sinon.
     */
    public boolean hasAnnouncedNoise() {
        return announcedNoise;
    }

    /**
     * Annonce un bruit √©trange dans la chambre et incite le joueur √† y jeter un coup d'oeil.
     */
    public void announceNoise() {
        announcedNoise = true;
        System.out.println("\nAttention! Un bruit √©trange vient de la chambre. Vous devriez y jeter un coup d'oeil imm√©diatement.\n");

    }
}
